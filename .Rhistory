patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- ("patient","age"."weight","bp","rating","test")
cnames <- c("patient","age"."weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data) <- cnames
my_data
library("swirl")
swirl()
true==true
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!==7
!(5==7)
!5==7
FALSE&TRUE
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 !=8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints <= 0)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum())
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
library("swirl")
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
View(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library("swirl")
swirl()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
?sample
sample(c(0,1),100.replace=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2&min
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x <- 4L
class (s)
class(x)
x <- c(4,"a",TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <-1:4
y <- 2:3
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x<6] <- 0
x
pwd
dir
getwd()
getwd()
getwd()
getwd
getwd()
data <- read.table("hw1_data")
data <- read.table("hw1_data.csv")
data <- read.csv("hw1_data.csv")
data
data[1:2]
data
data[,2]
data[2,]
data[1:2,]
nrows(data)
rows(data)
data[152:153,]
data[47,]
nrow(data)
ncol(data)
is.na(data[1,])
is.na(data[,1])
sum(is.na(data[1,]))
sum(is.na(data[,1]))
?mean
mean(data[,1], na.rm=TRUE)
data
mean(data[,1], na.rm=TRUE)
datat$ozone
data$Ozone
data
data$Ozone > 31 && data$Temp > 90
data$Temp > 90
data$Ozone
data[data$Ozone > 31,]
!is.na(data[data$Ozone > 31,])
data
library("swirl")
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vecto) <- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
getwd()
?read.csv
read.csv("hw1_data.csv")
data <- read.csv("hw1_data.csv")
nrows(data)
nrow(datta)
nrow(data)
ncol(data)
attrib(data)
attr(data)
dim(data)
attributes(data)
data
u <- data$Ozone > 31
v <- data$temp > 90
data2 <- data[u,] & data[v,]
data2 <- data[u,]
data2
data3 <- data2[v,]
date3
data3
data2
v <- data2$Temp > 90
v
data3 <- data2[v,]
data3
?mean
mean(data3,na.rm=TRUE)
mean(data3$Solar.R,na.rm=TRUE)
data
w <- data$Month == 6
data4 <- data[w,]
data4
mean(data4$Temp)
x <- data$Month == 5
data5 <- data[x,]
data5
max(data5$Ozone)
?max
max(data5$Ozone, na.rm = TRUE)
add2 <- function(x,y) {
x + y
}
add2(3,5)
above <- function(x,n) {
use <- x > n
}
above
x <- 1:10
above (x,12)
x <- 1:20
above (12)
above (x,12)
x
above (x, 12)
above <- function(x,n) {
use <- x > n
x[use]
above (x, 12)
x
x <- 1:20
x
above <- function(x,n) {
use <- x > n
x[use]
}
clear
above <- function(x,n) {
use <- x > n
x[use]
}
x <- 1:20
above (x,12)
above <- function(x,n=10) {
use <- x > n
x[use]
}
above (x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
menas[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality,FALSE)
args(mean)
args(rnorm)
args(lm)
search()
args(strptime)
?strptime
?as.posixlt
?as.posixlt
?as.posixct
?as.POSIXlt
?complete.cases
cube <- function(x,n) {}
cube <- function(x,n) {
x<3
}
cube(3)
cube <- function(x,n) {
x^3
}
cube(3)
warn <- function (){
x<- 1:10
if (X > 5) {
x <- 0
}
}
warn
warn()
?if
()
?if()
?if
()
x <- 1:10
if (x > 5) {x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
f1 <- function{
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
}
f1 <- function() {
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
}
f1
y
pollutantmean <- function(directory, pollutant, id){
}
pollutantmean("specdata")
directory
pollutantmean("specdata","sulfate",1:10)
directory
pollutantmean <- function(directory, pollutant, id){
directory
}
pollutantmean("specdata","nitrate",70:72)
pollutantmean <- function(directory, pollutant, id){
directory
Pollutant
id
}
pollutantmean("specdata","nitrate",70:72)
pollutantmean <- function(directory, pollutant, id){
directory
pollutant
id
}
pollutantmean("specdata","nitrate",70:72)
?read.csv
?len
?length
pollutantmean <- function(directory, pollutant, id){
#directory
#pollutant
#id
length(id)
}
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","nitrate",1:10)
pollutantmean("specdata","nitrate",23)
?read.csv
pollutantmean <- function(directory, pollutant, id){
#directory
#pollutant
#id
length(id) #calculate how many files have to read
data <- read.csv(c(directory, "\","316""))
data
}
pollutantmean <- function(directory, pollutant, id){
#directory
#pollutant
#id
length(id) #calculate how many files have to read
data1 <- read.csv(c(directory, "\","316""))
data1
}
pollutantmean <- function(directory, pollutant, id){
#directory
#pollutant
#id
length(id) #calculate how many files have to read
filename <- c(directory,"\","316")
filename
}
filename <- c("specdata","\"."316)
?c
filename <- c("specdata","316")
filename
as.char(filename)
as.character(filename)
setwd
?setwd
pollutantmean <- function(directory, pollutant, id){
#directory
#pollutant
#id
length(id) #calculate how many files have to read
setwd(directory)
getwd()
}
pollutantmean("specdata","nitrate",23)
getwd()
library(datasets)
data(iris)
?iris
head(iris)
colMeans(iris)
apply(iris[,1:4],1,mean)
head(iris)
sapply(split(iris$Sepal.Length, iris$Species), mean)
setwd("~/R files/Program 2/Clone")
source('~/R files/Program 2/Clone/cachematrix.R')
samplematrix <- matrix(1:9,nrow=3,ncol=3)
samplematrix
samplematrixfunctions <- (makeCacheMatrix(samplematrix))
samplematrixfunctions$get()
samplematrixfunctions$getinverse()
cacheSolve(samplematrixfunctions)
samplematrix
solve(samplematrix)
?solve
samplematrix <- (c(1,1,1,1,1,1,1,1,1), nrow=3, ncol=3)
samplematrix <- matrix(c(1,1,1,1,1,1,1,1,1),nrow=3, ncol=3)
samplematrix
solve(samplematrix)
samplematrix <- matrix(c(1,2,3,5),nrow=2,ncol=2)
samplematrix
solve(samplematrix)
source('~/R files/Program 2/Clone/cachematrix.R')
samplematrixfunction <- makeCacheMatrix(samplematrix)
samplematrixfunction$get()
samplematrixfunction$getinverse()
makeCacheMatrix(samplematrixfunction)
makeCacheMatrix(samplematrixfunction)
cacheSolve(samplematrixfunction)
samplematrixfunction$getinverse
cacheSolve(samplematrixfunction)
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
source('~/R files/Program 2/Clone/cachematrix.R')
